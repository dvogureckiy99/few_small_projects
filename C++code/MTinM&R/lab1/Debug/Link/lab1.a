;/*
; * lab1.c
; *
; * Created: 11.09.2019 11:46:22
; * Author: Student
; * Выводит от -180 до 180 без зацикливания. Накопленная сумма при заходе за пределы обнуляется.
; */
;
;#include <define.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;// Массив кодов цифр
;const unsigned char segments[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D,0x7D, 0x07, 0x7F, 0x6F, 0x40, 0x00};

	.DSEG
;unsigned char Digit (unsigned int val, unsigned char m)
; 0000 0009 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;    //[]-----------------------------------------------------[]
;    //| Назначение: выделение цифр из разрядов пятиразрядного |
;    //| десятичного положительного числа  |
;    //| Входные параметры: |
;    //| d - целое десятичное положительное число |
;    //| m - номер разряда (от 1 до 5, слева направо) |
;    //| Функция возвращает значение цифры в разряде m числа d |
;    //[]-----------------------------------------------------[]
;    unsigned char i = 5, a ;
;    unsigned int d = val ;
;    while(i)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	val -> Y+5
;	m -> Y+4
;	i -> R17
;	a -> R16
;	d -> R18,R19
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;    { // цикл по разрядам числа
;        a = d%10; // выделяем очередной разряд
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;        if(i-- == m) break; // выделен заданный разряд - уходим
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;        d /= 10; // уменьшаем число в 10 раз
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;    }
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;    return(a);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;}
;PCODE: $0000002F VOL: 0
;
;void indic_int (int val)
;{
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;    unsigned char i = 1;
;    int flag_first_digit = 0;
;    int var = val;
;    if(val<0)
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;	val -> Y+6
;	i -> R17
;	flag_first_digit -> R18,R19
;	var -> R20,R21
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;    {
;        var = abs(val); ///перевод в прямой код отрицательного числа
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;    }
;    do
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;    {
;       unsigned int digit;
;       digit=Digit(var,i);
;PCODE: $00000042 VOL: 0
;	val -> Y+8
;	digit -> Y+0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;
;       if(digit==0)
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;       {
;            if(flag_first_digit==0)
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;            {
;                PORTC = segments[VOID];
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;                if(i==5)
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;                {
;                    PORTC = segments[0];
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;                }
;            }else
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;            {
;                PORTC = segments[0];
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;            }
;PCODE: $0000005A VOL: 0
;       }else
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;       {     if(val<0)
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;             {
;                 if(flag_first_digit==0)
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;                 {
;                     PORTC = segments[SIGN];
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;                     BitSet(PORTA,i-1) ;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;                     delay_us(1)     ;
;PCODE: $0000006D VOL: 0
;                     BitClr(PORTA,i-1) ;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;                 }
;             }
;PCODE: $00000077 VOL: 0
;             flag_first_digit = 1;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;             PORTC = segments[digit];
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;
;       }
;PCODE: $0000007F VOL: 0
;       BitSet(PORTA,i) ;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;       delay_us(1)     ;
;PCODE: $00000087 VOL: 0
;       BitClr(PORTA,i) ;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;       i++;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;    }
;PCODE: $00000092 VOL: 0
;    while (i<=5);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;
;}
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;
;void init_segments()
;{
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;    PORTA &=  ~(_BV(1) | _BV(2) | _BV(3) | _BV(4) | _BV(5) )  ;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;    PORTC = 0 ;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;    DDRA = _BV(DDA1) | _BV(DDA2) | _BV(DDA3) | _BV(DDA4) | _BV(DDA5)  ;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;    DDRC = _BV(DDC0) | _BV(DDC1) | _BV(DDC2) | _BV(DDC3) | _BV(DDC4) | _BV(DDC5) | _BV(DDC6) | _BV(DDC7);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;}
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;
;
;interrupt [EXT_INT1] void int1Isr(void)
; 0000 000C {
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 000D     // Если прерывание по фронту
; 0000 000E     if(BIT_IS_SET(PIND, 1))
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 000F     {
; 0000 0010         // Настраиваем прерывание на срез
; 0000 0011         EICRA = _BV(ISC11);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0012 
; 0000 0013         if(BIT_IS_CLEAR(PIND, 0))
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0014         {
; 0000 0015             angle+=9;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0016         }
; 0000 0017         else    // Если на второй ножке высокий уровень
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0018         {
; 0000 0019             angle-=9;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 001A         }
;PCODE: $000000BC VOL: 0
; 0000 001B     }
; 0000 001C     else
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 001D     {
; 0000 001E         // Если прерывание по срезу
; 0000 001F         // Настраиваем прерывание на фронт
; 0000 0020         EICRA = _BV(ISC11) | _BV(ISC10);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0021 
; 0000 0022         if(BIT_IS_CLEAR(PIND, 0))
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0023         {
; 0000 0024             angle-=9;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0025         }
; 0000 0026         else        // Если на второй ножке высокий уровень
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0027         {
; 0000 0028             angle+=9;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0029         }
;PCODE: $000000CC VOL: 0
; 0000 002A     }
;PCODE: $000000CD VOL: 0
; 0000 002B     if(angle>180)
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 002C     {
; 0000 002D         angle=180;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 002E     }
; 0000 002F      if(angle<-180)
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0030     {
; 0000 0031         angle=-180;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0032     }
; 0000 0033 
; 0000 0034 }
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;
;
;
;void main(void)
; 0000 0039 {
;PCODE: $000000DD VOL: 0
; 0000 003A     init_segments()   ;
;PCODE: $000000DE VOL: 0
; 0000 003B     #asm("sei");  //разрешение прерываний
;PCODE: $000000DF VOL: 0
	sei
;PCODE: $000000E0 VOL: 0
; 0000 003C     EICRA = _BV(ISC11) | _BV(ISC10) ;//на фронт
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 003D     EIMSK = _BV(INT1);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 003E 
; 0000 003F while (1)
;PCODE: $000000E5 VOL: 0
; 0000 0040     {
; 0000 0041         indic_int(angle);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0042         delay_ms(20);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0043     // Please write your application code here
; 0000 0044     }
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0045 }
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0


AVRASM ver. 2.1.30  C:\Users\ogure\OneDrive\Документы\googledrive\7_sem\3_Microprocessor Technology in Mechatronics and Robotics\labs\lab6\Debug\List\lab6.asm Sun Sep 29 17:40:43 2019

C:\Users\ogure\OneDrive\Документы\googledrive\7_sem\3_Microprocessor Technology in Mechatronics and Robotics\labs\lab6\Debug\List\lab6.asm(1090): warning: Register r4 already defined by the .DEF directive
C:\Users\ogure\OneDrive\Документы\googledrive\7_sem\3_Microprocessor Technology in Mechatronics and Robotics\labs\lab6\Debug\List\lab6.asm(1091): warning: Register r5 already defined by the .DEF directive
C:\Users\ogure\OneDrive\Документы\googledrive\7_sem\3_Microprocessor Technology in Mechatronics and Robotics\labs\lab6\Debug\List\lab6.asm(1092): warning: Register r6 already defined by the .DEF directive
C:\Users\ogure\OneDrive\Документы\googledrive\7_sem\3_Microprocessor Technology in Mechatronics and Robotics\labs\lab6\Debug\List\lab6.asm(1093): warning: Register r7 already defined by the .DEF directive
C:\Users\ogure\OneDrive\Документы\googledrive\7_sem\3_Microprocessor Technology in Mechatronics and Robotics\labs\lab6\Debug\List\lab6.asm(1094): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 11,052900 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Kp=R4
                 	.DEF _Kp_msb=R5
                 	.DEF _Kd=R6
                 	.DEF _Kd_msb=R7
                 	.DEF _f_Kp=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 011b 	JMP  _int1Isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000046 0005
000047 0001      	.DB  0x5,0x0,0x1,0x0
000048 0000      	.DB  0x0,0x0
                 
                 _0x3:
000049 063f
00004a 4f5b
00004b 6d66
00004c 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00004d 6f7f
C:\Users\ogure\OneDrive\Документы\googledrive\7_sem\3_Microprocessor Technology in Mechatronics and Robotics\labs\lab6\Debug\List\lab6.asm(1146): warning: .cseg .db misalignment - padding zero byte
00004e 0040      	.DB  0x7F,0x6F,0x40
                 _0x2000060:
C:\Users\ogure\OneDrive\Документы\googledrive\7_sem\3_Microprocessor Technology in Mechatronics and Robotics\labs\lab6\Debug\List\lab6.asm(1148): warning: .cseg .db misalignment - padding zero byte
00004f 0001      	.DB  0x1
                 _0x2000000:
000050 4e2d
000051 4e41
000052 4900
000053 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\ogure\OneDrive\Документы\googledrive\7_sem\3_Microprocessor Technology in Mechatronics and Robotics\labs\lab6\Debug\List\lab6.asm(1151): warning: .cseg .db misalignment - padding zero byte
000054 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000055 0006      	.DW  0x06
000056 0004      	.DW  0x04
000057 008c      	.DW  __REG_VARS*2
                 
000058 000b      	.DW  0x0B
000059 0500      	.DW  _segments
00005a 0092      	.DW  _0x3*2
                 
00005b 0001      	.DW  0x01
00005c 050c      	.DW  __seed_G100
00005d 009e      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
00005e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005f 94f8      	CLI
000060 27ee      	CLR  R30
000061 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000062 e0f1      	LDI  R31,1
000063 bff5      	OUT  MCUCR,R31
000064 bfe5      	OUT  MCUCR,R30
000065 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000067 e08d      	LDI  R24,(14-2)+1
000068 e0a2      	LDI  R26,2
000069 27bb      	CLR  R27
                 __CLEAR_REG:
00006a 93ed      	ST   X+,R30
00006b 958a      	DEC  R24
00006c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006e e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006f e0a0      	LDI  R26,LOW(__SRAM_START)
000070 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000071 93ed      	ST   X+,R30
000072 9701      	SBIW R24,1
000073 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000074 eaea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000075 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000076 9185      	LPM  R24,Z+
000077 9195      	LPM  R25,Z+
000078 9700      	SBIW R24,0
000079 f061      	BREQ __GLOBAL_INI_END
00007a 91a5      	LPM  R26,Z+
00007b 91b5      	LPM  R27,Z+
00007c 9005      	LPM  R0,Z+
00007d 9015      	LPM  R1,Z+
00007e 01bf      	MOVW R22,R30
00007f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000080 9005      	LPM  R0,Z+
000081 920d      	ST   X+,R0
000082 9701      	SBIW R24,1
000083 f7e1      	BRNE __GLOBAL_INI_LOOP
000084 01fb      	MOVW R30,R22
000085 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000086 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000087 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000088 bfed      	OUT  SPL,R30
000089 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008b e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008c e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008d 940c 0178 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*
                 ;* lab8
                 ; * Created: 11.09.2019 11:46:22
                 ; * Author: Student
                 ; *
                 ; * Variant 8
                 ; *  нужно добавить проверку кнопку энкодера
                 ; */
                 ;
                 ;#include <define.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#define SIGN 10
                 ;#define VOID 11
                 ;
                 ;// Массив кодов цифр
                 ;const unsigned char segments[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D,0x7D, 0x07, 0x7F, 0x6F, 0x40, 0x00};
                 
                 	.DSEG
                 ;unsigned char Digit (unsigned int val, unsigned char m)
                 ; 0000 000A {
                 
                 	.CSEG
                 _Digit:
                 ; .FSTART _Digit
                 ;    //[]-----------------------------------------------------[]
                 ;    //| Назначение: выделение цифр из разрядов пятиразрядного |
                 ;    //| десятичного положительного числа  |
                 ;    //| Входные параметры: |
                 ;    //| d - целое десятичное положительное число |
                 ;    //| m - номер разряда (от 1 до 5, слева направо) |
                 ;    //| Функция возвращает значение цифры в разряде m числа d |
                 ;    //[]-----------------------------------------------------[]
                 ;    unsigned char i = 5, a ;
                 ;    unsigned int d = val ;
                 ;    while(i)
00008f 93aa      	ST   -Y,R26
000090 940e 0243 	CALL __SAVELOCR4
                 ;	val -> Y+5
                 ;	m -> Y+4
                 ;	i -> R17
                 ;	a -> R16
                 ;	d -> R18,R19
000092 e015      	LDI  R17,5
                +
000093 812d     +LDD R18 , Y + 5
000094 813e     +LDD R19 , Y + 5 + 1
                 	__GETWRS 18,19,5
                 _0x4:
000095 3010      	CPI  R17,0
000096 f099      	BREQ _0x6
                 ;    { // цикл по разрядам числа
                 ;        a = d%10; // выделяем очередной разряд
000097 01d9      	MOVW R26,R18
000098 e0ea      	LDI  R30,LOW(10)
000099 e0f0      	LDI  R31,HIGH(10)
00009a 940e 023e 	CALL __MODW21U
00009c 2f0e      	MOV  R16,R30
                 ;        if(i-- == m) break; // выделен заданный разряд - уходим
00009d 931f      	PUSH R17
00009e 5011      	SUBI R17,1
00009f 81ec      	LDD  R30,Y+4
0000a0 91af      	POP  R26
0000a1 17ea      	CP   R30,R26
0000a2 f039      	BREQ _0x6
                 ;        d /= 10; // уменьшаем число в 10 раз
0000a3 01d9      	MOVW R26,R18
0000a4 e0ea      	LDI  R30,LOW(10)
0000a5 e0f0      	LDI  R31,HIGH(10)
0000a6 940e 022b 	CALL __DIVW21U
0000a8 019f      	MOVW R18,R30
                 ;    }
0000a9 cfeb      	RJMP _0x4
                 _0x6:
                 ;    return(a);
0000aa 2fe0      	MOV  R30,R16
0000ab 940e 024a 	CALL __LOADLOCR4
0000ad 9627      	ADIW R28,7
0000ae 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;void indic_int (int val)
                 ;{
                 _indic_int:
                 ; .FSTART _indic_int
                 ;    unsigned char i = 1;
                 ;    int flag_first_digit = 0;
                 ;    int var = val;
                 ;    if(val<0)
0000af 93ba      	ST   -Y,R27
0000b0 93aa      	ST   -Y,R26
0000b1 940e 0241 	CALL __SAVELOCR6
                 ;	val -> Y+6
                 ;	i -> R17
                 ;	flag_first_digit -> R18,R19
                 ;	var -> R20,R21
0000b3 e011      	LDI  R17,1
                +
0000b4 e020     +LDI R18 , LOW ( 0 )
0000b5 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
0000b6 814e     +LDD R20 , Y + 6
0000b7 815f     +LDD R21 , Y + 6 + 1
                 	__GETWRS 20,21,6
0000b8 81af      	LDD  R26,Y+7
0000b9 23aa      	TST  R26
0000ba f422      	BRPL _0x8
                 ;    {
                 ;        var = abs(val); ///перевод в прямой код отрицательного числа
0000bb 81ae      	LDD  R26,Y+6
0000bc 81bf      	LDD  R27,Y+6+1
0000bd d154      	RCALL _abs
0000be 01af      	MOVW R20,R30
                 ;    }
                 ;    do
                 _0x8:
                 _0xA:
                 ;    {
                 ;       unsigned int digit;
                 ;       digit=Digit(var,i);
0000bf 9722      	SBIW R28,2
                 ;	val -> Y+8
                 ;	digit -> Y+0
0000c0 935a      	ST   -Y,R21
0000c1 934a      	ST   -Y,R20
0000c2 2fa1      	MOV  R26,R17
0000c3 dfcb      	RCALL _Digit
0000c4 e0f0      	LDI  R31,0
0000c5 83e8      	ST   Y,R30
0000c6 83f9      	STD  Y+1,R31
                 ;
                 ;       if(digit==0)
0000c7 9730      	SBIW R30,0
0000c8 f481      	BRNE _0xC
                 ;       {
                 ;            if(flag_first_digit==0)
0000c9 2e02      	MOV  R0,R18
0000ca 2a03      	OR   R0,R19
0000cb f449      	BRNE _0xD
                 ;            {
                 ;                PORTC = segments[VOID];
                +
0000cc 91e0 050b+LDS R30 , _segments + ( 11 )
                 	__GETB1MN _segments,11
0000ce bbe5      	OUT  0x15,R30
                 ;                if(i==5)
0000cf 3015      	CPI  R17,5
0000d0 f419      	BRNE _0xE
                 ;                {
                 ;                    PORTC = segments[0];
0000d1 91e0 0500 	LDS  R30,_segments
0000d3 bbe5      	OUT  0x15,R30
                 ;                }
                 ;            }else
                 _0xE:
0000d4 c003      	RJMP _0xF
                 _0xD:
                 ;            {
                 ;                PORTC = segments[0];
0000d5 91e0 0500 	LDS  R30,_segments
0000d7 bbe5      	OUT  0x15,R30
                 ;            }
                 _0xF:
                 ;       }else
0000d8 c01d      	RJMP _0x10
                 _0xC:
                 ;       {     if(val<0)
0000d9 85a9      	LDD  R26,Y+9
0000da 23aa      	TST  R26
0000db f492      	BRPL _0x11
                 ;             {
                 ;                 if(flag_first_digit==0)
0000dc 2e02      	MOV  R0,R18
0000dd 2a03      	OR   R0,R19
0000de f479      	BRNE _0x12
                 ;                 {
                 ;                     PORTC = segments[SIGN];
                +
0000df 91e0 050a+LDS R30 , _segments + ( 10 )
                 	__GETB1MN _segments,10
0000e1 bbe5      	OUT  0x15,R30
                 ;                     BitSet(PORTA,i-1) ;
0000e2 940e 021c 	CALL SUBOPT_0x0
0000e4 29e1      	OR   R30,R1
0000e5 bbeb      	OUT  0x1B,R30
                 ;                     delay_us(1)     ;
                +
0000e6 e084     +LDI R24 , LOW ( 4 )
                +__DELAY_USB_LOOP :
0000e7 958a     +DEC R24
0000e8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 4
                 ;                     BitClr(PORTA,i-1) ;
0000e9 940e 021c 	CALL SUBOPT_0x0
0000eb 95e0      	COM  R30
0000ec 21e1      	AND  R30,R1
0000ed bbeb      	OUT  0x1B,R30
                 ;                 }
                 ;             }
                 _0x12:
                 ;             flag_first_digit = 1;
                 _0x11:
                +
0000ee e021     +LDI R18 , LOW ( 1 )
0000ef e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ;             PORTC = segments[digit];
0000f0 81e8      	LD   R30,Y
0000f1 81f9      	LDD  R31,Y+1
0000f2 50e0      	SUBI R30,LOW(-_segments)
0000f3 4ffb      	SBCI R31,HIGH(-_segments)
0000f4 81e0      	LD   R30,Z
0000f5 bbe5      	OUT  0x15,R30
                 ;
                 ;       }
                 _0x10:
                 ;       BitSet(PORTA,i) ;
0000f6 b21b      	IN   R1,27
0000f7 2fe1      	MOV  R30,R17
0000f8 e0a1      	LDI  R26,LOW(1)
0000f9 940e 0223 	CALL __LSLB12
0000fb 29e1      	OR   R30,R1
0000fc bbeb      	OUT  0x1B,R30
                 ;       delay_us(1)     ;
                +
0000fd e084     +LDI R24 , LOW ( 4 )
                +__DELAY_USB_LOOP :
0000fe 958a     +DEC R24
0000ff f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 4
                 ;       BitClr(PORTA,i) ;
000100 b21b      	IN   R1,27
000101 2fe1      	MOV  R30,R17
000102 e0a1      	LDI  R26,LOW(1)
000103 940e 0223 	CALL __LSLB12
000105 95e0      	COM  R30
000106 21e1      	AND  R30,R1
000107 bbeb      	OUT  0x1B,R30
                 ;       i++;
000108 5f1f      	SUBI R17,-1
                 ;    }
000109 9622      	ADIW R28,2
                 ;    while (i<=5);
00010a 3016      	CPI  R17,6
00010b f408      	BRSH _0xB
00010c cfb2      	RJMP _0xA
                 _0xB:
                 ;}
00010d 940e 0248 	CALL __LOADLOCR6
00010f 9628      	ADIW R28,8
000110 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void indic_uint (unsigned int val)
                 ;{
                 ;    unsigned char i = 1;
                 ;    int flag_first_digit = 0;
                 ;    int var = val;
                 ;    do
                 ;	val -> Y+6
                 ;	i -> R17
                 ;	flag_first_digit -> R18,R19
                 ;	var -> R20,R21
                 ;    {
                 ;       unsigned int digit;
                 ;       digit=Digit(var,i);
                 ;	val -> Y+8
                 ;	digit -> Y+0
                 ;
                 ;       if(digit==0)
                 ;       {
                 ;            if(flag_first_digit==0)
                 ;            {
                 ;                PORTC = segments[VOID];
                 ;                if(i==5)
                 ;                {
                 ;                    PORTC = segments[0];
                 ;                }
                 ;            }else
                 ;            {
                 ;                PORTC = segments[0];
                 ;            }
                 ;       }else
                 ;       {
                 ;             flag_first_digit = 1;
                 ;             PORTC = segments[digit];
                 ;       }
                 ;       BitSet(PORTA,i) ;
                 ;       delay_us(1)     ;
                 ;       BitClr(PORTA,i) ;
                 ;       i++;
                 ;    }
                 ;    while (i<=5);
                 ;}
                 ;
                 ;//void indic_float (float val)
                 ;//{
                 ;//    unsigned char i = 1;
                 ;//    int flag_first_digit = 0;
                 ;//    flo var = val;
                 ;//    if(val<0)
                 ;//    {
                 ;//        var = abs(val); ///перевод в прямой код отрицательного числа
                 ;//    }
                 ;//    do
                 ;//    {
                 ;//       unsigned int digit;
                 ;//       digit=Digit(var,i);
                 ;//
                 ;//       if(digit==0)
                 ;//       {
                 ;//            if(flag_first_digit==0)
                 ;//            {
                 ;//                PORTC = segments[VOID];
                 ;//                if(i==5)
                 ;//                {
                 ;//                    PORTC = segments[0];
                 ;//                }
                 ;//            }else
                 ;//            {
                 ;//                PORTC = segments[0];
                 ;//            }
                 ;//       }else
                 ;//       {     if(val<0)
                 ;//             {
                 ;//                 if(flag_first_digit==0)
                 ;//                 {
                 ;//                     PORTC = segments[SIGN];
                 ;//                     BitSet(PORTA,i-1) ;
                 ;//                     delay_us(1)     ;
                 ;//                     BitClr(PORTA,i-1) ;
                 ;//                 }
                 ;//             }
                 ;//             flag_first_digit = 1;
                 ;//             PORTC = segments[digit];
                 ;//
                 ;//       }
                 ;//       BitSet(PORTA,i) ;
                 ;//       delay_us(1)     ;
                 ;//       BitClr(PORTA,i) ;
                 ;//       i++;
                 ;//    }
                 ;//    while (i<=5);
                 ;//
                 ;//}
                 ;
                 ;void init_segments()
                 ;{
                 _init_segments:
                 ; .FSTART _init_segments
                 ;    PORTA &=  ~(_BV(1) | _BV(2) | _BV(3) | _BV(4) | _BV(5) )  ;
000111 b3eb      	IN   R30,0x1B
000112 7ce1      	ANDI R30,LOW(0xC1)
000113 bbeb      	OUT  0x1B,R30
                 ;    PORTC = 0 ;
000114 e0e0      	LDI  R30,LOW(0)
000115 bbe5      	OUT  0x15,R30
                 ;    DDRA = _BV(DDA1) | _BV(DDA2) | _BV(DDA3) | _BV(DDA4) | _BV(DDA5)  ;
000116 e3ee      	LDI  R30,LOW(62)
000117 bbea      	OUT  0x1A,R30
                 ;    DDRC = _BV(DDC0) | _BV(DDC1) | _BV(DDC2) | _BV(DDC3) | _BV(DDC4) | _BV(DDC5) | _BV(DDC6) | _BV(DDC7);
000118 efef      	LDI  R30,LOW(255)
000119 bbe4      	OUT  0x14,R30
                 ;}
00011a 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;interrupt [EXT_INT1] void int1Isr(void)
                 ; 0000 000D {
                 _int1Isr:
                 ; .FSTART _int1Isr
00011b 93ea      	ST   -Y,R30
00011c 93fa      	ST   -Y,R31
00011d b7ef      	IN   R30,SREG
00011e 93ea      	ST   -Y,R30
                 ; 0000 000E     // Если прерывание по фронту
                 ; 0000 000F     if(BIT_IS_SET(PIND, 1))
00011f 9b81      	SBIS 0x10,1
000120 c019      	RJMP _0x1B
                 ; 0000 0010     {
                 ; 0000 0011         // Настраиваем прерывание на срез
                 ; 0000 0012         EICRA = _BV(ISC11);
000121 e0e8      	LDI  R30,LOW(8)
000122 93e0 006a 	STS  106,R30
                 ; 0000 0013 
                 ; 0000 0014         if(BIT_IS_CLEAR(PIND, 0))
000124 9980      	SBIC 0x10,0
000125 c00a      	RJMP _0x1C
                 ; 0000 0015         {
                 ; 0000 0016             if(f_Kp){  Kp+=1;}else{ Kd+=1; };
000126 2099      	TST  R9
000127 f021      	BREQ _0x1D
000128 01f2      	MOVW R30,R4
000129 9631      	ADIW R30,1
00012a 012f      	MOVW R4,R30
00012b c003      	RJMP _0x1E
                 _0x1D:
00012c 01f3      	MOVW R30,R6
00012d 9631      	ADIW R30,1
00012e 013f      	MOVW R6,R30
                 _0x1E:
                 ; 0000 0017         }
                 ; 0000 0018         else    // Если на второй ножке высокий уровень
00012f c009      	RJMP _0x1F
                 _0x1C:
                 ; 0000 0019         {
                 ; 0000 001A             if(f_Kp){  Kp-=1;}else{ Kd-=1; };
000130 2099      	TST  R9
000131 f021      	BREQ _0x20
000132 01f2      	MOVW R30,R4
000133 9731      	SBIW R30,1
000134 012f      	MOVW R4,R30
000135 c003      	RJMP _0x21
                 _0x20:
000136 01f3      	MOVW R30,R6
000137 9731      	SBIW R30,1
000138 013f      	MOVW R6,R30
                 _0x21:
                 ; 0000 001B         }
                 _0x1F:
                 ; 0000 001C     }
                 ; 0000 001D     else
000139 c018      	RJMP _0x22
                 _0x1B:
                 ; 0000 001E     {
                 ; 0000 001F         // Если прерывание по срезу
                 ; 0000 0020         // Настраиваем прерывание на фронт
                 ; 0000 0021         EICRA = _BV(ISC11) | _BV(ISC10);
00013a e0ec      	LDI  R30,LOW(12)
00013b 93e0 006a 	STS  106,R30
                 ; 0000 0022 
                 ; 0000 0023         if(BIT_IS_CLEAR(PIND, 0))
00013d 9980      	SBIC 0x10,0
00013e c00a      	RJMP _0x23
                 ; 0000 0024         {
                 ; 0000 0025             if(f_Kp){  Kp-=1;}else{ Kd-=1; };
00013f 2099      	TST  R9
000140 f021      	BREQ _0x24
000141 01f2      	MOVW R30,R4
000142 9731      	SBIW R30,1
000143 012f      	MOVW R4,R30
000144 c003      	RJMP _0x25
                 _0x24:
000145 01f3      	MOVW R30,R6
000146 9731      	SBIW R30,1
000147 013f      	MOVW R6,R30
                 _0x25:
                 ; 0000 0026         }
                 ; 0000 0027         else        // Если на второй ножке высокий уровень
000148 c009      	RJMP _0x26
                 _0x23:
                 ; 0000 0028         {
                 ; 0000 0029             if(f_Kp){  Kp+=1;}else{ Kd+=1; };
000149 2099      	TST  R9
00014a f021      	BREQ _0x27
00014b 01f2      	MOVW R30,R4
00014c 9631      	ADIW R30,1
00014d 012f      	MOVW R4,R30
00014e c003      	RJMP _0x28
                 _0x27:
00014f 01f3      	MOVW R30,R6
000150 9631      	ADIW R30,1
000151 013f      	MOVW R6,R30
                 _0x28:
                 ; 0000 002A         }
                 _0x26:
                 ; 0000 002B     }
                 _0x22:
                 ; 0000 002C     if(Kp<1)
000152 e0e1      	LDI  R30,LOW(1)
000153 e0f0      	LDI  R31,HIGH(1)
000154 164e      	CP   R4,R30
000155 065f      	CPC  R5,R31
000156 f408      	BRSH _0x29
                 ; 0000 002D     {
                 ; 0000 002E         Kp=1;
000157 012f      	MOVW R4,R30
                 ; 0000 002F     }
                 ; 0000 0030     if(Kd<1)
                 _0x29:
000158 e0e1      	LDI  R30,LOW(1)
000159 e0f0      	LDI  R31,HIGH(1)
00015a 166e      	CP   R6,R30
00015b 067f      	CPC  R7,R31
00015c f408      	BRSH _0x2A
                 ; 0000 0031     {
                 ; 0000 0032         Kp=1;
00015d 012f      	MOVW R4,R30
                 ; 0000 0033     }
                 ; 0000 0034 }
                 _0x2A:
00015e 91e9      	LD   R30,Y+
00015f bfef      	OUT  SREG,R30
000160 91f9      	LD   R31,Y+
000161 91e9      	LD   R30,Y+
000162 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;unsigned int readAdc(unsigned char channel)
                 ; 0000 0038 {
                 _readAdc:
                 ; .FSTART _readAdc
                 ; 0000 0039     ADMUX = MUX | channel;
000163 93aa      	ST   -Y,R26
                 ;	channel -> Y+0
000164 81e8      	LD   R30,Y
000165 64e0      	ORI  R30,0x40
000166 b9e7      	OUT  0x7,R30
                 ; 0000 003A     delay_us(10);
                +
000167 e285     +LDI R24 , LOW ( 37 )
                +__DELAY_USB_LOOP :
000168 958a     +DEC R24
000169 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 37
                 ; 0000 003B     ADCSRA |= _BV(ADSC); // Запуск преобразования
00016a 9a36      	SBI  0x6,6
                 ; 0000 003C     while(BIT_IS_CLEAR(ADCSRA, ADIF));   // Ожидание завершения преобразования
                 _0x2B:
00016b 9b34      	SBIS 0x6,4
00016c cffe      	RJMP _0x2B
                 ; 0000 003D     ADCSRA |= _BV(ADIF);   // Сброс флага прерывания АЦП
00016d 9a34      	SBI  0x6,4
                 ; 0000 003E     return ADCL+(ADCH<<8);
00016e b1e4      	IN   R30,0x4
00016f e0f0      	LDI  R31,0
000170 01df      	MOVW R26,R30
000171 b1e5      	IN   R30,0x5
000172 2ffe      	MOV  R31,R30
000173 e0e0      	LDI  R30,0
000174 0fea      	ADD  R30,R26
000175 1ffb      	ADC  R31,R27
000176 9621      	ADIW R28,1
000177 9508      	RET
                 ; 0000 003F }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0042 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0043     init_segments();
000178 df98      	RCALL _init_segments
                 ; 0000 0044         #asm("sei");  //разрешение прерываний
000179 9478      	sei
                 ; 0000 0045     EICRA = _BV(ISC11) | _BV(ISC10) ;//на фронт
00017a e0ec      	LDI  R30,LOW(12)
00017b 93e0 006a 	STS  106,R30
                 ; 0000 0046     EIMSK = _BV(INT1);
00017d e0e2      	LDI  R30,LOW(2)
00017e bfe9      	OUT  0x39,R30
                 ; 0000 0047     // Инициализация портов ввода/вывода
                 ; 0000 0048     DDRB = _BV(5);//ШИМ управления
00017f e2e0      	LDI  R30,LOW(32)
000180 bbe7      	OUT  0x17,R30
                 ; 0000 0049     DDRG = _BV(3);//направление тока
000181 e0e8      	LDI  R30,LOW(8)
000182 93e0 0064 	STS  100,R30
                 ; 0000 004A 
                 ; 0000 004B     // Инициализация АЦП
                 ; 0000 004C     ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0); //freq=11.0529/128=0,08635078125 MHz T=11.58 us/tick
000184 e8e7      	LDI  R30,LOW(135)
000185 b9e6      	OUT  0x6,R30
                 ; 0000 004D     // Инициализация таймера 1
                 ; 0000 004E     // Быстрая ШИМ 8 бит
                 ; 0000 004F     TCCR1A = _BV(COM1A1) | _BV(WGM10);
000186 e8e1      	LDI  R30,LOW(129)
000187 bdef      	OUT  0x2F,R30
                 ; 0000 0050     TCCR1B = _BV(WGM12) | _BV(CS10);
000188 e0e9      	LDI  R30,LOW(9)
000189 bdee      	OUT  0x2E,R30
                 ; 0000 0051     while(1)
                 _0x2E:
                 ; 0000 0052     {
                 ; 0000 0053         int field; // Значение с датчика Холла
                 ; 0000 0054         int ref; // Задание
                 ; 0000 0055         int error = 0; // Ошибка управления
                 ; 0000 0056         int control; // Сигнал управления
                 ; 0000 0057         int error_last=0; //   Ошибка управления последнее
                 ; 0000 0058         //управления
                 ; 0000 0059         // Получение и фильтрация сигнала с датчика
                 ; 0000 005A         // магнитного поля
                 ; 0000 005B         field = (readAdc(1) + readAdc(1) +
00018a 972a      	SBIW R28,10
00018b e0e0      	LDI  R30,LOW(0)
00018c 83e8      	ST   Y,R30
00018d 83e9      	STD  Y+1,R30
00018e 83ea      	STD  Y+2,R30
00018f 83eb      	STD  Y+3,R30
000190 83ec      	STD  Y+4,R30
000191 83ed      	STD  Y+5,R30
                 ;	field -> Y+8
                 ;	ref -> Y+6
                 ;	error -> Y+4
                 ;	control -> Y+2
                 ;	error_last -> Y+0
                 ; 0000 005C         readAdc(1) + readAdc(1) + readAdc(1)) / 5;
000192 e0a1      	LDI  R26,LOW(1)
000193 dfcf      	RCALL _readAdc
000194 93ff      	PUSH R31
000195 93ef      	PUSH R30
000196 e0a1      	LDI  R26,LOW(1)
000197 dfcb      	RCALL _readAdc
000198 91af      	POP  R26
000199 91bf      	POP  R27
00019a 0fea      	ADD  R30,R26
00019b 1ffb      	ADC  R31,R27
00019c 93ff      	PUSH R31
00019d 93ef      	PUSH R30
00019e e0a1      	LDI  R26,LOW(1)
00019f dfc3      	RCALL _readAdc
0001a0 91af      	POP  R26
0001a1 91bf      	POP  R27
0001a2 0fea      	ADD  R30,R26
0001a3 1ffb      	ADC  R31,R27
0001a4 93ff      	PUSH R31
0001a5 93ef      	PUSH R30
0001a6 e0a1      	LDI  R26,LOW(1)
0001a7 dfbb      	RCALL _readAdc
0001a8 91af      	POP  R26
0001a9 91bf      	POP  R27
0001aa 0fea      	ADD  R30,R26
0001ab 1ffb      	ADC  R31,R27
0001ac 93ff      	PUSH R31
0001ad 93ef      	PUSH R30
0001ae e0a1      	LDI  R26,LOW(1)
0001af dfb3      	RCALL _readAdc
0001b0 91af      	POP  R26
0001b1 91bf      	POP  R27
0001b2 0fae      	ADD  R26,R30
0001b3 1fbf      	ADC  R27,R31
0001b4 e0e5      	LDI  R30,LOW(5)
0001b5 e0f0      	LDI  R31,HIGH(5)
0001b6 940e 022b 	CALL __DIVW21U
0001b8 87e8      	STD  Y+8,R30
0001b9 87f9      	STD  Y+8+1,R31
                 ; 0000 005D         field -= 512;   //если  показания датчика равны 512, то field равно 0
0001ba 50e0      	SUBI R30,LOW(512)
0001bb 40f2      	SBCI R31,HIGH(512)
0001bc 87e8      	STD  Y+8,R30
0001bd 87f9      	STD  Y+8+1,R31
                 ; 0000 005E 
                 ; 0000 005F         ref = readAdc(3); // Получение задания с ручки
0001be e0a3      	LDI  R26,LOW(3)
0001bf dfa3      	RCALL _readAdc
0001c0 83ee      	STD  Y+6,R30
0001c1 83ff      	STD  Y+6+1,R31
                 ; 0000 0060         //потенциомера
                 ; 0000 0061         // Расчёт ошибки управления
                 ; 0000 0062         error = ref - field;
0001c2 85a8      	LDD  R26,Y+8
0001c3 85b9      	LDD  R27,Y+8+1
0001c4 1bea      	SUB  R30,R26
0001c5 0bfb      	SBC  R31,R27
0001c6 83ec      	STD  Y+4,R30
0001c7 83fd      	STD  Y+4+1,R31
                 ; 0000 0063         // Расчёт сигнала управления
                 ; 0000 0064         control = error/Kp+(error-error_last)/Kd;
0001c8 01f2      	MOVW R30,R4
0001c9 81ac      	LDD  R26,Y+4
0001ca 81bd      	LDD  R27,Y+4+1
0001cb 940e 022b 	CALL __DIVW21U
0001cd 01bf      	MOVW R22,R30
0001ce 81a8      	LD   R26,Y
0001cf 81b9      	LDD  R27,Y+1
0001d0 81ec      	LDD  R30,Y+4
0001d1 81fd      	LDD  R31,Y+4+1
0001d2 1bea      	SUB  R30,R26
0001d3 0bfb      	SBC  R31,R27
0001d4 01df      	MOVW R26,R30
0001d5 01f3      	MOVW R30,R6
0001d6 940e 022b 	CALL __DIVW21U
0001d8 0fe6      	ADD  R30,R22
0001d9 1ff7      	ADC  R31,R23
0001da 83ea      	STD  Y+2,R30
0001db 83fb      	STD  Y+2+1,R31
                 ; 0000 0065         error_last=error;
0001dc 81ec      	LDD  R30,Y+4
0001dd 81fd      	LDD  R31,Y+4+1
0001de 83e8      	ST   Y,R30
0001df 83f9      	STD  Y+1,R31
                 ; 0000 0066 
                 ; 0000 0067         // Ограничение сигнала управления
                 ; 0000 0068         if(control > 255)
0001e0 81aa      	LDD  R26,Y+2
0001e1 81bb      	LDD  R27,Y+2+1
0001e2 30a0      	CPI  R26,LOW(0x100)
0001e3 e0e1      	LDI  R30,HIGH(0x100)
0001e4 07be      	CPC  R27,R30
0001e5 f024      	BRLT _0x31
                 ; 0000 0069         {
                 ; 0000 006A             control = 255;
0001e6 efef      	LDI  R30,LOW(255)
0001e7 e0f0      	LDI  R31,HIGH(255)
0001e8 83ea      	STD  Y+2,R30
0001e9 83fb      	STD  Y+2+1,R31
                 ; 0000 006B         }
                 ; 0000 006C         if(control < -255)
                 _0x31:
0001ea 81aa      	LDD  R26,Y+2
0001eb 81bb      	LDD  R27,Y+2+1
0001ec 30a1      	CPI  R26,LOW(0xFF01)
0001ed efef      	LDI  R30,HIGH(0xFF01)
0001ee 07be      	CPC  R27,R30
0001ef f424      	BRGE _0x32
                 ; 0000 006D         {
                 ; 0000 006E             control = -255;
0001f0 e0e1      	LDI  R30,LOW(65281)
0001f1 efff      	LDI  R31,HIGH(65281)
0001f2 83ea      	STD  Y+2,R30
0001f3 83fb      	STD  Y+2+1,R31
                 ; 0000 006F         }
                 ; 0000 0070 
                 ; 0000 0071         // Установка сигнала управления
                 ; 0000 0072         if(control >= 0)
                 _0x32:
0001f4 81ab      	LDD  R26,Y+3
0001f5 23aa      	TST  R26
0001f6 f03a      	BRMI _0x33
                 ; 0000 0073         {
                 ; 0000 0074             PORTG &= ~_BV(3); //установка положительного тока
0001f7 91e0 0065 	LDS  R30,101
0001f9 7fe7      	ANDI R30,0XF7
0001fa 93e0 0065 	STS  101,R30
                 ; 0000 0075             OCR1AL = (unsigned char)control;
0001fc 81ea      	LDD  R30,Y+2
0001fd c007      	RJMP _0x39
                 ; 0000 0076         }
                 ; 0000 0077         else
                 _0x33:
                 ; 0000 0078         {
                 ; 0000 0079             PORTG |= _BV(3); //установка отрицательного тока
0001fe 91e0 0065 	LDS  R30,101
000200 60e8      	ORI  R30,8
000201 93e0 0065 	STS  101,R30
                 ; 0000 007A             OCR1AL = (unsigned char)(-control);
000203 81ea      	LDD  R30,Y+2
000204 95e1      	NEG  R30
                 _0x39:
000205 bdea      	OUT  0x2A,R30
                 ; 0000 007B         }
                 ; 0000 007C 
                 ; 0000 007D         indic_int( f_Kp ? Kp : Kd );
000206 2de9      	MOV  R30,R9
000207 e0f0      	LDI  R31,0
000208 9730      	SBIW R30,0
000209 f011      	BREQ _0x35
00020a 01f2      	MOVW R30,R4
00020b c001      	RJMP _0x36
                 _0x35:
00020c 01f3      	MOVW R30,R6
                 _0x36:
00020d 01df      	MOVW R26,R30
00020e dea0      	RCALL _indic_int
                 ; 0000 007E     }
00020f 962a      	ADIW R28,10
000210 cf79      	RJMP _0x2E
                 ; 0000 007F }
                 _0x38:
000211 cfff      	RJMP _0x38
                 ; .FEND
                 
                 	.CSEG
                 _abs:
                 ; .FSTART _abs
000212 93ba      	ST   -Y,R27
000213 93aa      	ST   -Y,R26
000214 91e9          ld   r30,y+
000215 91f9          ld   r31,y+
000216 9730          sbiw r30,0
000217 f41a          brpl __abs0
000218 95e0          com  r30
000219 95f0          com  r31
00021a 9631          adiw r30,1
                 __abs0:
00021b 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _segments:
000500           	.BYTE 0xC
                 __seed_G100:
00050c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00021c b21b      	IN   R1,27
00021d 2fe1      	MOV  R30,R17
00021e 50e1      	SUBI R30,LOW(1)
00021f e0a1      	LDI  R26,LOW(1)
000220 940e 0223 	CALL __LSLB12
000222 9508      	RET
                 
                 
                 	.CSEG
                 __LSLB12:
000223 23ee      	TST  R30
000224 2e0e      	MOV  R0,R30
000225 2fea      	MOV  R30,R26
000226 f019      	BREQ __LSLB12R
                 __LSLB12L:
000227 0fee      	LSL  R30
000228 940a      	DEC  R0
000229 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
00022a 9508      	RET
                 
                 __DIVW21U:
00022b 2400      	CLR  R0
00022c 2411      	CLR  R1
00022d e190      	LDI  R25,16
                 __DIVW21U1:
00022e 0faa      	LSL  R26
00022f 1fbb      	ROL  R27
000230 1c00      	ROL  R0
000231 1c11      	ROL  R1
000232 1a0e      	SUB  R0,R30
000233 0a1f      	SBC  R1,R31
000234 f418      	BRCC __DIVW21U2
000235 0e0e      	ADD  R0,R30
000236 1e1f      	ADC  R1,R31
000237 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000238 60a1      	SBR  R26,1
                 __DIVW21U3:
000239 959a      	DEC  R25
00023a f799      	BRNE __DIVW21U1
00023b 01fd      	MOVW R30,R26
00023c 01d0      	MOVW R26,R0
00023d 9508      	RET
                 
                 __MODW21U:
00023e dfec      	RCALL __DIVW21U
00023f 01fd      	MOVW R30,R26
000240 9508      	RET
                 
                 __SAVELOCR6:
000241 935a      	ST   -Y,R21
                 __SAVELOCR5:
000242 934a      	ST   -Y,R20
                 __SAVELOCR4:
000243 933a      	ST   -Y,R19
                 __SAVELOCR3:
000244 932a      	ST   -Y,R18
                 __SAVELOCR2:
000245 931a      	ST   -Y,R17
000246 930a      	ST   -Y,R16
000247 9508      	RET
                 
                 __LOADLOCR6:
000248 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000249 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00024a 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00024b 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00024c 8119      	LDD  R17,Y+1
00024d 8108      	LD   R16,Y
00024e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  15 r1 :  12 r2 :   0 r3 :   0 r4 :  13 r5 :   1 r6 :  11 r7 :   1 
r8 :   0 r9 :   5 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   4 r17:  14 r18:  10 r19:   7 r20:   5 r21:   4 r22:   4 r23:   1 
r24:  14 r25:   4 r26:  55 r27:  25 r28:   8 r29:   1 r30: 189 r31:  48 
x  :   3 y  :  81 z  :   8 
Registers used: 26 out of 35 (74.3%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   7 add   :   7 
adiw  :  10 and   :   2 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   9 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   1 brmi  :   1 brne  :  12 brpl  :   3 brsh  :   3 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  14 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   4 
cp    :   3 cpc   :   4 cpi   :   5 cpse  :   0 dec   :   6 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   7 inc   :   0 jmp   :  36 ld    :  10 ldd   :  31 
ldi   :  65 lds   :   6 lpm   :   7 lsl   :   2 lsr   :   0 mov   :  12 
movw  :  36 mul   :   0 muls  :   0 mulsu :   0 neg   :   1 nop   :   0 
or    :   4 ori   :   2 out   :  27 pop   :   9 push  :   9 rcall :  11 
ret   :  11 reti  :   1 rjmp  :  21 rol   :   3 ror   :   0 sbc   :   3 
sbci  :   2 sbi   :   2 sbic  :   2 sbis  :   2 sbiw  :  12 sbr   :   1 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  23 std   :  21 sts   :   7 sub   :   3 subi  :   5 
swap  :   0 tst   :   8 wdr   :   0 
Instructions used: 56 out of 117 (47.9%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00049e   1132     50   1182  131072   0.9%
[.dseg] 0x000100 0x000510      0     16     16    4096   0.4%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 8 warnings

;/*
;* lab8
; * Created: 11.09.2019 11:46:22
; * Author: Student
; *
; * Variant 8
; *  нужно добавить проверку кнопку энкодера
; */
;
;#include <define.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#define SIGN 10
;#define VOID 11
;
;// Массив кодов цифр
;const unsigned char segments[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D,0x7D, 0x07, 0x7F, 0x6F, 0x40, 0x00};

	.DSEG
;unsigned char Digit (unsigned int val, unsigned char m)
; 0000 000A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;    //[]-----------------------------------------------------[]
;    //| Назначение: выделение цифр из разрядов пятиразрядного |
;    //| десятичного положительного числа  |
;    //| Входные параметры: |
;    //| d - целое десятичное положительное число |
;    //| m - номер разряда (от 1 до 5, слева направо) |
;    //| Функция возвращает значение цифры в разряде m числа d |
;    //[]-----------------------------------------------------[]
;    unsigned char i = 5, a ;
;    unsigned int d = val ;
;    while(i)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	val -> Y+5
;	m -> Y+4
;	i -> R17
;	a -> R16
;	d -> R18,R19
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;    { // цикл по разрядам числа
;        a = d%10; // выделяем очередной разряд
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;        if(i-- == m) break; // выделен заданный разряд - уходим
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;        d /= 10; // уменьшаем число в 10 раз
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;    }
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;    return(a);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;}
;PCODE: $0000002F VOL: 0
;
;void indic_int (int val)
;{
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;    unsigned char i = 1;
;    int flag_first_digit = 0;
;    int var = val;
;    if(val<0)
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;	val -> Y+6
;	i -> R17
;	flag_first_digit -> R18,R19
;	var -> R20,R21
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;    {
;        var = abs(val); ///перевод в прямой код отрицательного числа
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;    }
;    do
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;    {
;       unsigned int digit;
;       digit=Digit(var,i);
;PCODE: $00000042 VOL: 0
;	val -> Y+8
;	digit -> Y+0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;
;       if(digit==0)
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;       {
;            if(flag_first_digit==0)
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;            {
;                PORTC = segments[VOID];
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;                if(i==5)
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;                {
;                    PORTC = segments[0];
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;                }
;            }else
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;            {
;                PORTC = segments[0];
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;            }
;PCODE: $0000005A VOL: 0
;       }else
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;       {     if(val<0)
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;             {
;                 if(flag_first_digit==0)
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;                 {
;                     PORTC = segments[SIGN];
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;                     BitSet(PORTA,i-1) ;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;                     delay_us(1)     ;
;PCODE: $0000006D VOL: 0
;                     BitClr(PORTA,i-1) ;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;                 }
;             }
;PCODE: $00000077 VOL: 0
;             flag_first_digit = 1;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;             PORTC = segments[digit];
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;
;       }
;PCODE: $0000007F VOL: 0
;       BitSet(PORTA,i) ;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;       delay_us(1)     ;
;PCODE: $00000087 VOL: 0
;       BitClr(PORTA,i) ;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;       i++;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;    }
;PCODE: $00000092 VOL: 0
;    while (i<=5);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;}
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;
;
;void indic_uint (unsigned int val)
;{
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;    unsigned char i = 1;
;    int flag_first_digit = 0;
;    int var = val;
;    do
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;	val -> Y+6
;	i -> R17
;	flag_first_digit -> R18,R19
;	var -> R20,R21
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;    {
;       unsigned int digit;
;       digit=Digit(var,i);
;PCODE: $000000A8 VOL: 0
;	val -> Y+8
;	digit -> Y+0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;
;       if(digit==0)
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;       {
;            if(flag_first_digit==0)
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;            {
;                PORTC = segments[VOID];
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;                if(i==5)
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;                {
;                    PORTC = segments[0];
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;                }
;            }else
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;            {
;                PORTC = segments[0];
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;            }
;PCODE: $000000C0 VOL: 0
;       }else
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;       {
;             flag_first_digit = 1;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;             PORTC = segments[digit];
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;       }
;PCODE: $000000C9 VOL: 0
;       BitSet(PORTA,i) ;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;       delay_us(1)     ;
;PCODE: $000000D1 VOL: 0
;       BitClr(PORTA,i) ;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;       i++;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;    }
;PCODE: $000000DC VOL: 0
;    while (i<=5);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;}
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;
;//void indic_float (float val)
;//{
;//    unsigned char i = 1;
;//    int flag_first_digit = 0;
;//    flo var = val;
;//    if(val<0)
;//    {
;//        var = abs(val); ///перевод в прямой код отрицательного числа
;//    }
;//    do
;//    {
;//       unsigned int digit;
;//       digit=Digit(var,i);
;//
;//       if(digit==0)
;//       {
;//            if(flag_first_digit==0)
;//            {
;//                PORTC = segments[VOID];
;//                if(i==5)
;//                {
;//                    PORTC = segments[0];
;//                }
;//            }else
;//            {
;//                PORTC = segments[0];
;//            }
;//       }else
;//       {     if(val<0)
;//             {
;//                 if(flag_first_digit==0)
;//                 {
;//                     PORTC = segments[SIGN];
;//                     BitSet(PORTA,i-1) ;
;//                     delay_us(1)     ;
;//                     BitClr(PORTA,i-1) ;
;//                 }
;//             }
;//             flag_first_digit = 1;
;//             PORTC = segments[digit];
;//
;//       }
;//       BitSet(PORTA,i) ;
;//       delay_us(1)     ;
;//       BitClr(PORTA,i) ;
;//       i++;
;//    }
;//    while (i<=5);
;//
;//}
;
;void init_segments()
;{
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;    PORTA &=  ~(_BV(1) | _BV(2) | _BV(3) | _BV(4) | _BV(5) )  ;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;    PORTC = 0 ;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;    DDRA = _BV(DDA1) | _BV(DDA2) | _BV(DDA3) | _BV(DDA4) | _BV(DDA5)  ;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;    DDRC = _BV(DDC0) | _BV(DDC1) | _BV(DDC2) | _BV(DDC3) | _BV(DDC4) | _BV(DDC5) | _BV(DDC6) | _BV(DDC7);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;}
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;
;
;interrupt [EXT_INT1] void int1Isr(void)
; 0000 000D {
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 000E     // Если прерывание по фронту
; 0000 000F     if(BIT_IS_SET(PIND, 1))
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0010     {
; 0000 0011         // Настраиваем прерывание на срез
; 0000 0012         EICRA = _BV(ISC11);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0013 
; 0000 0014         if(BIT_IS_CLEAR(PIND, 0))
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0015         {
; 0000 0016             if(f_Kp){  Kp+=1;}else{ Kd+=1; };
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0017         }
; 0000 0018         else    // Если на второй ножке высокий уровень
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0019         {
; 0000 001A             if(f_Kp){  Kp-=1;}else{ Kd-=1; };
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 001B         }
;PCODE: $00000116 VOL: 0
; 0000 001C     }
; 0000 001D     else
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 001E     {
; 0000 001F         // Если прерывание по срезу
; 0000 0020         // Настраиваем прерывание на фронт
; 0000 0021         EICRA = _BV(ISC11) | _BV(ISC10);
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0022 
; 0000 0023         if(BIT_IS_CLEAR(PIND, 0))
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 0024         {
; 0000 0025             if(f_Kp){  Kp-=1;}else{ Kd-=1; };
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0026         }
; 0000 0027         else        // Если на второй ножке высокий уровень
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0028         {
; 0000 0029             if(f_Kp){  Kp+=1;}else{ Kd+=1; };
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 002A         }
;PCODE: $00000136 VOL: 0
; 0000 002B     }
;PCODE: $00000137 VOL: 0
; 0000 002C     if(Kp<1)
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 002D     {
; 0000 002E         Kp=1;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 002F     }
; 0000 0030     if(Kd<1)
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0031     {
; 0000 0032         Kp=1;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 0033     }
; 0000 0034 }
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;
;
;unsigned int readAdc(unsigned char channel)
; 0000 0038 {
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 0039     ADMUX = MUX | channel;
;PCODE: $00000149 VOL: 0
;	channel -> Y+0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 003A     delay_us(10);
;PCODE: $0000014D VOL: 0
; 0000 003B     ADCSRA |= _BV(ADSC); // Запуск преобразования
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 003C     while(BIT_IS_CLEAR(ADCSRA, ADIF));   // Ожидание завершения преобразования
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 003D     ADCSRA |= _BV(ADIF);   // Сброс флага прерывания АЦП
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 003E     return ADCL+(ADCH<<8);
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 003F }
;PCODE: $00000160 VOL: 0
;
;void main(void)
; 0000 0042 {
;PCODE: $00000161 VOL: 0
; 0000 0043     init_segments();
;PCODE: $00000162 VOL: 0
; 0000 0044         #asm("sei");  //разрешение прерываний
;PCODE: $00000163 VOL: 0
	sei
;PCODE: $00000164 VOL: 0
; 0000 0045     EICRA = _BV(ISC11) | _BV(ISC10) ;//на фронт
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 0046     EIMSK = _BV(INT1);
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 0047     // Инициализация портов ввода/вывода
; 0000 0048     DDRB = _BV(5);//ШИМ управления
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 0049     DDRG = _BV(3);//направление тока
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 004A 
; 0000 004B     // Инициализация АЦП
; 0000 004C     ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0); //freq=11.0529/128=0,08635078125 MHz T=11.58 us/tick
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 004D     // Инициализация таймера 1
; 0000 004E     // Быстрая ШИМ 8 бит
; 0000 004F     TCCR1A = _BV(COM1A1) | _BV(WGM10);
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0050     TCCR1B = _BV(WGM12) | _BV(CS10);
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0051     while(1)
;PCODE: $00000173 VOL: 0
; 0000 0052     {
; 0000 0053         int field; // Значение с датчика Холла
; 0000 0054         int ref; // Задание
; 0000 0055         int error = 0; // Ошибка управления
; 0000 0056         int control; // Сигнал управления
; 0000 0057         int error_last=0; //   Ошибка управления последнее
; 0000 0058         //управления
; 0000 0059         // Получение и фильтрация сигнала с датчика
; 0000 005A         // магнитного поля
; 0000 005B         field = (readAdc(1) + readAdc(1) +
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;	field -> Y+8
;	ref -> Y+6
;	error -> Y+4
;	control -> Y+2
;	error_last -> Y+0
; 0000 005C         readAdc(1) + readAdc(1) + readAdc(1)) / 5;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 005D         field -= 512;   //если  показания датчика равны 512, то field равно 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 005E 
; 0000 005F         ref = readAdc(3); // Получение задания с ручки
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0060         //потенциомера
; 0000 0061         // Расчёт ошибки управления
; 0000 0062         error = ref - field;
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 0063         // Расчёт сигнала управления
; 0000 0064         control = error/Kp+(error-error_last)/Kd;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 0065         error_last=error;
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 0066 
; 0000 0067         // Ограничение сигнала управления
; 0000 0068         if(control > 255)
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 0069         {
; 0000 006A             control = 255;
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 006B         }
; 0000 006C         if(control < -255)
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 006D         {
; 0000 006E             control = -255;
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 006F         }
; 0000 0070 
; 0000 0071         // Установка сигнала управления
; 0000 0072         if(control >= 0)
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 0073         {
; 0000 0074             PORTG &= ~_BV(3); //установка положительного тока
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 0075             OCR1AL = (unsigned char)control;
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 0076         }
; 0000 0077         else
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 0078         {
; 0000 0079             PORTG |= _BV(3); //установка отрицательного тока
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 007A             OCR1AL = (unsigned char)(-control);
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 007B         }
;PCODE: $000001CE VOL: 0
; 0000 007C 
; 0000 007D         indic_int( f_Kp ? Kp : Kd );
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 007E     }
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 007F }
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
